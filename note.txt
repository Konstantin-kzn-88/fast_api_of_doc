1. Запуск сервера: uvicorn main:app --reload (потому что точка входа app = FastAPI())
2. Документация: http://127.0.0.1:8000/docs
3. JSON схема: http://127.0.0.1:8000/openapi.json
_________
4. В OpenAPI каждый HTTP метод называется "операция".
@app.get() прочитать
@app.post() создать данные
@app.put() изменить (обновить)
@app.delete() удалить

5. График Fast Api
https://stackoverflow.com/questions/71211282/how-to-use-json-response-from-fastapi-backend-to-create-a-chart-using-chart-js-i

__________
Авторизация и аутентификация
1. Создание базы данных со связанными таблицами
2. Создание аунтификации auth.py
2.1. Класс "Создать пользователя" (ник, емайл, имя, фамилия, пароль)
2.2. @app.post('/create/user/') на основании models.Users() сделать поля
2.3. Хеш пароля brypte passlib (cоздание def get_password_hash)
2.4 Функцию хешированного пароля используем в функции создания пользователя create_new_user, для
хеширования пароля
2.5. Делаем сохранение пользователя в базу данных. добавляем в @app.post('/create/user/') add и commit
2.6. Создаем функция верификации пароля, для
сравнения того что передали, с хешированной версией из бд
2.7. Пишем функцию аутентификации:
- запрос в бд есть ли там username
-проверка верификации пароля
возвращаем пользователя
2.9. Пишем функцию токена @app.post('/token')
2.10 JWT создаем python-jose
Bearer - носитель пароля
создаем ф-цию create_access_token
добавляем в создание токена @app.post('/token')
2.11 Пишем ф-цию получить текущего пользователя, которая будет декодировать полученный токен get_current_user.


